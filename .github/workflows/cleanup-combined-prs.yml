name: 'Cleanup Combined Dependency PRs'

# This workflow runs when a combined dependency PR is merged
# It closes source PRs and deletes their branches

on:
  pull_request:
    types: [closed]
    branches: [main, develop]

jobs:
  cleanup-source-prs:
    # Only run if PR was merged and has the right title pattern
    if: |
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, 'chore(deps): Combined dependency updates')

    runs-on: ubuntu-latest
    permissions:
      contents: write        # Delete branches after cleanup
      pull-requests: write   # Close source PRs
      issues: write          # Post cleanup comments

    steps:
      - name: Cleanup Source PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const mergedPR = context.payload.pull_request;
            console.log(`Combined PR #${mergedPR.number} was merged`);
            console.log(`Title: ${mergedPR.title}`);
            console.log(`Merged by: ${mergedPR.merged_by.login}`);
            console.log(`Merged at: ${mergedPR.merged_at}`);

            // Extract PR numbers from the merged PR body
            const prNumberRegex = /#(\d+)/g;
            const matches = [...mergedPR.body.matchAll(prNumberRegex)];
            const sourcePRNumbers = matches
              .map(match => parseInt(match[1]))
              .filter(num => num !== mergedPR.number) // Exclude the combined PR itself
              .filter((num, index, self) => self.indexOf(num) === index); // Remove duplicates

            console.log(`\nFound ${sourcePRNumbers.length} source PR references: ${sourcePRNumbers.join(', ')}`);

            if (sourcePRNumbers.length === 0) {
              console.log('No source PRs found to clean up');
              return;
            }

            let closedCount = 0;
            let deletedBranchCount = 0;
            let skippedCount = 0;
            let errorCount = 0;

            // Close source PRs and delete their branches
            for (const prNumber of sourcePRNumbers) {
              try {
                console.log(`\nProcessing PR #${prNumber}...`);
                
                // Get PR details
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });

                console.log(`  Title: ${pr.title}`);
                console.log(`  State: ${pr.state}`);
                console.log(`  Branch: ${pr.head.ref}`);

                // Only close if PR is still open
                if (pr.state === 'open') {
                  // Add comment before closing
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `✅ This PR was successfully combined and merged in #${mergedPR.number}. Closing and cleaning up.`
                  });

                  // Close the PR
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    state: 'closed'
                  });

                  console.log(`  ✅ Closed PR #${prNumber}`);
                  closedCount++;

                  // Delete the branch
                  const branchName = pr.head.ref;
                  try {
                    // Only delete if it's not a protected branch and not from a fork
                    if (!pr.head.repo || pr.head.repo.full_name === context.payload.repository.full_name) {
                      await github.rest.git.deleteRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: `heads/${branchName}`
                      });
                      console.log(`  ✅ Deleted branch: ${branchName}`);
                      deletedBranchCount++;
                    } else {
                      console.log(`  ℹ️ Skipped deleting branch ${branchName} (from fork)`);
                    }
                  } catch (error) {
                    console.log(`  ⚠️ Could not delete branch ${branchName}: ${error.message}`);
                  }
                } else {
                  console.log(`  ℹ️ PR #${prNumber} is already ${pr.state}`);
                  skippedCount++;
                }
              } catch (error) {
                console.log(`  ❌ Error processing PR #${prNumber}: ${error.message}`);
                errorCount++;
              }
            }

            // Delete combined PR branch
            const combinedBranchName = mergedPR.head.ref;
            console.log(`\nDeleting combined branch: ${combinedBranchName}`);
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${combinedBranchName}`
              });
              console.log(`✅ Deleted combined branch: ${combinedBranchName}`);
              deletedBranchCount++;
            } catch (error) {
              console.log(`⚠️ Could not delete combined branch ${combinedBranchName}: ${error.message}`);
            }

            // Summary
            console.log('\n=== Cleanup Summary ===');
            console.log(`PRs closed: ${closedCount}`);
            console.log(`Branches deleted: ${deletedBranchCount}`);
            console.log(`PRs skipped (already closed): ${skippedCount}`);
            console.log(`Errors: ${errorCount}`);
            console.log('\n✅ Cleanup completed');

            // Set outputs for the workflow summary
            core.setOutput('closed_count', closedCount);
            core.setOutput('deleted_branch_count', deletedBranchCount);
            core.setOutput('skipped_count', skippedCount);
            core.setOutput('error_count', errorCount);

      - name: Workflow Summary
        if: success()
        run: |
          echo "### ✅ Source PRs Cleaned Up" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully processed combined PR merge:" >> $GITHUB_STEP_SUMMARY
          echo "- PRs closed: ${{ steps.cleanup-source-prs.outputs.closed_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branches deleted: ${{ steps.cleanup-source-prs.outputs.deleted_branch_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- PRs already closed: ${{ steps.cleanup-source-prs.outputs.skipped_count }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.cleanup-source-prs.outputs.error_count }}" -gt "0" ]; then
            echo "- ⚠️ Errors: ${{ steps.cleanup-source-prs.outputs.error_count }}" >> $GITHUB_STEP_SUMMARY
          fi
